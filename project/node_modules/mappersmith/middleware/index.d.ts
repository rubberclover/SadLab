import type { Request } from '../request';
import type { Response } from '../response';
export declare type Context = object;
export declare type RequestGetter = () => Promise<Request>;
export declare type ResponseGetter = () => Promise<Response>;
export declare type AbortFn = (error: Error) => void;
export declare type RenewFn = () => Promise<Response>;
export interface MiddlewareDescriptor {
    __name?: string;
    /**
     * @deprecated: Use prepareRequest
     */
    request?(request: Request): Promise<Request> | Request;
    /**
     * @since 2.27.0
     * Replaced the request method
     */
    prepareRequest(next: RequestGetter, abort: AbortFn): Promise<Request | void>;
    response(next: ResponseGetter, renew: RenewFn): Promise<Response>;
}
export interface MiddlewareParams {
    readonly clientId: string | null;
    readonly context: Context;
    readonly resourceMethod: string;
    readonly resourceName: string;
    readonly mockRequest?: boolean;
}
declare type DefaultPrivateProps = {};
/**
 * Mappersmith middleware, used to describe a factory function that given MiddlewareParams
 * returns a middleware object (partial of MiddlewareDescriptor).
 *
 * If the middleware needs to save local state you can use PrivateProps to allow it.
 */
export declare type Middleware<PrivateProps extends Record<string, unknown> = DefaultPrivateProps> = (params: MiddlewareParams) => Partial<MiddlewareDescriptor & PrivateProps>;
export {};
